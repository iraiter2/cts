{"version":3,"sources":["../../../src/webgpu/web-platform/copyImageBitmapToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","GPUTest","calculateRowPitch","width","bytesPerPixel","bytesPerRow","F","checkCopyImageBitmapResult","src","expected","height","exp","Uint8Array","buffer","byteOffset","byteLength","rowPitch","dst","createCopyForMapRead","eventualAsyncExpectation","niceStack","actual","mapReadAsync","check","checkBufferWithRowPitch","undefined","message","rec","expectationFailed","destroy","failedByteIndices","failedByteExpectedValues","failedByteActualValues","iLoop","i","j","indexExp","indexActual","length","push","toString","join","doTestAndCheckResult","imageBitmapCopyView","dstTextureCopyView","copySize","expectedData","device","defaultQueue","copyImageBitmapToTexture","imageBitmap","dstTexture","texture","testBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","encoder","createCommandEncoder","copyTextureToBuffer","mipLevel","origin","x","y","z","depth","submit","finish","g","test","combine","fn","t","alpha","orientation","imagePixels","Uint8ClampedArray","imageData","ImageData","createImageBitmap","premultiplyAlpha","imageOrientation","createTexture","format","GPUTextureUsage","expectedPixels","pos_image_pixel","pos_expected_value","alpha_value_position","imageCanvas","document","createElement","OffscreenCanvas","skip","imageCanvasContext","getContext","putImageData","getImageData","data"],"mappings":"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","sourcesContent":["export const description = `\ncopy imageBitmap To texture tests.\n`;\n\nimport { poptions, params } from '../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { GPUTest } from '../gpu_test.js';\n\nfunction calculateRowPitch(width: number, bytesPerPixel: number): number {\n  const bytesPerRow = width * bytesPerPixel;\n  // Rounds up to a multiple of 256 according to WebGPU requirements.\n  return (((bytesPerRow - 1) >> 8) + 1) << 8;\n}\n\nclass F extends GPUTest {\n  checkCopyImageBitmapResult(\n    src: GPUBuffer,\n    expected: ArrayBufferView,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n    const rowPitch = calculateRowPitch(width, bytesPerPixel);\n    const dst = this.createCopyForMapRead(src, rowPitch * height);\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const actual = new Uint8Array(await dst.mapReadAsync());\n      const check = this.checkBufferWithRowPitch(\n        actual,\n        exp,\n        width,\n        height,\n        rowPitch,\n        bytesPerPixel\n      );\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.expectationFailed(niceStack);\n      }\n      dst.destroy();\n    });\n  }\n\n  checkBufferWithRowPitch(\n    actual: Uint8Array,\n    exp: Uint8Array,\n    width: number,\n    height: number,\n    rowPitch: number,\n    bytesPerPixel: number\n  ): string | undefined {\n    const failedByteIndices: string[] = [];\n    const failedByteExpectedValues: string[] = [];\n    const failedByteActualValues: string[] = [];\n    iLoop: for (let i = 0; i < height; ++i) {\n      const bytesPerRow = width * bytesPerPixel;\n      for (let j = 0; j < bytesPerRow; ++j) {\n        const indexExp = j + i * bytesPerRow;\n        const indexActual = j + rowPitch * i;\n        if (actual[indexActual] !== exp[indexExp]) {\n          if (failedByteIndices.length >= 4) {\n            failedByteIndices.push('...');\n            failedByteExpectedValues.push('...');\n            failedByteActualValues.push('...');\n            break iLoop;\n          }\n          failedByteIndices.push(`(${i},${j})`);\n          failedByteExpectedValues.push(exp[indexExp].toString());\n          failedByteActualValues.push(actual[indexActual].toString());\n        }\n      }\n    }\n    if (failedByteIndices.length > 0) {\n      return `at [${failedByteIndices.join(', ')}], \\\nexpected [${failedByteExpectedValues.join(', ')}], \\\ngot [${failedByteActualValues.join(', ')}]`;\n    }\n    return undefined;\n  }\n\n  doTestAndCheckResult(\n    imageBitmapCopyView: GPUImageBitmapCopyView,\n    dstTextureCopyView: GPUTextureCopyView,\n    copySize: GPUExtent3D,\n    bytesPerPixel: number,\n    expectedData: Uint8ClampedArray\n  ): void {\n    this.device.defaultQueue.copyImageBitmapToTexture(\n      imageBitmapCopyView,\n      dstTextureCopyView,\n      copySize\n    );\n\n    const imageBitmap = imageBitmapCopyView.imageBitmap;\n    const dstTexture = dstTextureCopyView.texture;\n\n    const bytesPerRow = calculateRowPitch(imageBitmap.width, bytesPerPixel);\n    const testBuffer = this.device.createBuffer({\n      size: bytesPerRow * imageBitmap.height,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n      { buffer: testBuffer, bytesPerRow },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 }\n    );\n    this.device.defaultQueue.submit([encoder.finish()]);\n\n    this.checkCopyImageBitmapResult(\n      testBuffer,\n      expectedData,\n      imageBitmap.width,\n      imageBitmap.height,\n      bytesPerPixel\n    );\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('from_ImageData')\n  .params(\n    params()\n      .combine(poptions('width', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('height', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('alpha', ['none', 'premultiply']))\n      .combine(poptions('orientation', ['none', 'flipY']))\n  )\n  .fn(async t => {\n    const { width, height, alpha, orientation } = t.params;\n\n    // The texture format is rgba8unorm, so the bytes per pixel is 4.\n    const bytesPerPixel = 4;\n\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    if (alpha === 'premultiply') {\n      // Make expected value simple to construct:\n      // Input is (255, 255, 255, a), which will be stored into the ImageBitmap\n      // as (a, a, a, a).\n      for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n        imagePixels[i] = i % 4 !== 3 ? 255 : i % 256;\n      }\n    } else {\n      for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n        imagePixels[i] = i % 4 === 3 ? 255 : i % 256;\n      }\n    }\n\n    const imageData = new ImageData(imagePixels, width, height);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const imageBitmap = await (createImageBitmap as any)(imageData, {\n      premultiplyAlpha: alpha,\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depth: 1,\n      },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    // Construct expected value\n    const expectedPixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n      expectedPixels[i] = imagePixels[i];\n    }\n\n    if (orientation === 'flipY') {\n      for (let i = 0; i < height; ++i) {\n        for (let j = 0; j < width * bytesPerPixel; ++j) {\n          const pos_image_pixel = (height - i - 1) * width * bytesPerPixel + j;\n          const pos_expected_value = i * width * bytesPerPixel + j;\n          expectedPixels[pos_expected_value] = imagePixels[pos_image_pixel];\n        }\n      }\n    }\n\n    if (alpha === 'premultiply') {\n      for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n        const alpha_value_position = 3 - (i % 4) + i;\n        if (i % 4 !== 3) {\n          // Expected value is (a, a, a, a)\n          expectedPixels[i] = expectedPixels[alpha_value_position];\n        }\n      }\n    }\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },\n      bytesPerPixel,\n      expectedPixels\n    );\n  });\n\ng.test('from_canvas')\n  .params(\n    params()\n      .combine(poptions('width', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('height', [1, 2, 4, 15, 255, 256]))\n  )\n  .fn(async t => {\n    const { width, height } = t.params;\n\n    // CTS sometimes runs on worker threads, where document is not available.\n    // In this case, OffscreenCanvas can be used instead of <canvas>.\n    // But some browsers don't support OffscreenCanvas, and some don't\n    // support '2d' contexts on OffscreenCanvas.\n    // In this situation, the case will be skipped.\n    let imageCanvas;\n    if (typeof document !== 'undefined') {\n      imageCanvas = document.createElement('canvas');\n      imageCanvas.width = width;\n      imageCanvas.height = height;\n    } else if (typeof OffscreenCanvas === 'undefined') {\n      t.skip('OffscreenCanvas is not supported');\n      return;\n    } else {\n      imageCanvas = new OffscreenCanvas(width, height);\n    }\n    const imageCanvasContext = imageCanvas.getContext('2d');\n    if (imageCanvasContext === null) {\n      t.skip('OffscreenCanvas \"2d\" context not available');\n      return;\n    }\n\n    // The texture format is rgba8unorm, so the bytes per pixel is 4.\n    const bytesPerPixel = 4;\n\n    // Generate original data.\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n      imagePixels[i] = i % 4 === 3 ? 255 : i % 256;\n    }\n\n    const imageData = new ImageData(imagePixels, width, height);\n    imageCanvasContext.putImageData(imageData, 0, 0);\n\n    const imageBitmap = await createImageBitmap(imageCanvas);\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depth: 1,\n      },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    // This will get origin data and even it has premultiplied-alpha\n    const expectedData = imageCanvasContext.getImageData(\n      0,\n      0,\n      imageBitmap.width,\n      imageBitmap.height\n    ).data;\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },\n      bytesPerPixel,\n      expectedData\n    );\n  });\n"],"file":"copyImageBitmapToTexture.spec.js"}