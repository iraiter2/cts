{"version":3,"sources":["../../../../src/webgpu/web-platform/reftests/canvas_complex.ts"],"names":["unreachable","runRefTest","run","format","t","ctx","cvs","getContext","swapChain","configureSwapChain","device","usage","GPUTextureUsage","COPY_DST","rows","bytesPerRow","buffer","mapping","createBufferMapped","size","GPUBufferUsage","COPY_SRC","data","Uint8Array","set","zero","half","one","DataView","setUint16","unmap","texture","getCurrentTexture","encoder","createCommandEncoder","copyBufferToTexture","defaultQueue","submit","finish"],"mappings":"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","sourcesContent":["import { unreachable } from '../../../common/framework/util/util.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n// <canvas> element from html page\ndeclare const cvs: HTMLCanvasElement;\n\nexport function run(format: GPUTextureFormat) {\n  runRefTest(async t => {\n    const ctx = (cvs.getContext('gpupresent') as unknown) as GPUCanvasContext;\n\n    switch (format) {\n      case 'bgra8unorm':\n      case 'rgba16float':\n        break;\n      default:\n        unreachable();\n    }\n\n    const swapChain = ctx.configureSwapChain({\n      device: t.device,\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const rows = 2;\n    const bytesPerRow = 256;\n    const [buffer, mapping] = t.device.createBufferMapped({\n      size: rows * bytesPerRow,\n      usage: GPUBufferUsage.COPY_SRC,\n    });\n    switch (format) {\n      case 'bgra8unorm':\n        {\n          const data = new Uint8Array(mapping);\n          data.set(new Uint8Array([0x00, 0x00, 0x7f, 0xff]), 0); // red\n          data.set(new Uint8Array([0x00, 0x7f, 0x00, 0xff]), 4); // green\n          data.set(new Uint8Array([0x7f, 0x00, 0x00, 0xff]), 256 + 0); // blue\n          data.set(new Uint8Array([0x00, 0x7f, 0x7f, 0xff]), 256 + 4); // yellow\n        }\n        break;\n      case 'rgba16float':\n        {\n          // Untested!\n          const zero = 0x0000;\n          const half = 0x3800;\n          const one = 0x3c00;\n          const data = new DataView(mapping);\n          data.setUint16(0x000, half, false); // red\n          data.setUint16(0x002, zero, false);\n          data.setUint16(0x004, zero, false);\n          data.setUint16(0x008, one, false);\n          data.setUint16(0x010, zero, false); // green\n          data.setUint16(0x020, half, false);\n          data.setUint16(0x040, zero, false);\n          data.setUint16(0x080, one, false);\n          data.setUint16(0x100, zero, false); // blue\n          data.setUint16(0x102, zero, false);\n          data.setUint16(0x104, half, false);\n          data.setUint16(0x108, one, false);\n          data.setUint16(0x110, half, false); // yellow\n          data.setUint16(0x120, half, false);\n          data.setUint16(0x140, zero, false);\n          data.setUint16(0x180, one, false);\n        }\n        break;\n    }\n    buffer.unmap();\n\n    const texture = swapChain.getCurrentTexture();\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture }, [2, 2, 1]);\n    t.device.defaultQueue.submit([encoder.finish()]);\n  });\n}\n"],"file":"canvas_complex.js"}