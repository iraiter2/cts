{"version":3,"sources":["../../src/webgpu/capability_info.ts"],"names":["C","keysOf","obj","Object","keys","numericKeysOf","map","n","Number","kTextureFormatInfo","renderable","color","depth","stencil","storage","copyable","bytesPerBlock","blockWidth","blockHeight","kTextureFormats","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kTextureUsageInfo","TextureUsage","CopySrc","CopyDst","Sampled","Storage","OutputAttachment","kTextureUsages","kMaxBindingsPerBindGroup","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindableResource","uniformBuf","storageBuf","plainSamp","compareSamp","sampledTex","storageTex","errorBuf","errorSamp","errorTex","kBindableResources","kBindingKind","resource","perStageLimitClass","perPipelineLimitClass","sampler","kValidStagesAll","validStages","ShaderStage","Vertex","Fragment","Compute","kValidStagesStorageWrite","kBufferBindingTypeInfo","usage","BufferUsage","Uniform","kBufferBindingTypes","kSamplerBindingTypeInfo","kSamplerBindingTypes","kTextureBindingTypeInfo","kTextureBindingTypes","kBindingTypeInfo","kBindingTypes","kShaderStages","kShaderStageCombinations"],"mappings":"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","sourcesContent":["import * as C from '../common/constants.js';\n\nfunction keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nfunction numericKeysOf<T>(obj: object): readonly T[] {\n  return (Object.keys(obj).map(n => Number(n)) as unknown[]) as T[];\n}\n\n// Textures\n\nexport const kTextureFormatInfo: {\n  readonly [k in GPUTextureFormat]: {\n    readonly renderable: boolean;\n    readonly color: boolean;\n    readonly depth: boolean;\n    readonly stencil: boolean;\n    readonly storage: boolean;\n    readonly copyable: boolean;\n    readonly bytesPerBlock?: number;\n    readonly blockWidth?: number;\n    readonly blockHeight?: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  // Try to keep these manually-formatted in a readable grid.\n  // (Note: this list should always match the one in the spec.)\n\n  // 8-bit formats\n  'r8unorm':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  'r8snorm':                { renderable: false, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  'r8uint':                 { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  'r8sint':                 { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  1, blockWidth: 1, blockHeight: 1 },\n  // 16-bit formats\n  'r16uint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'r16sint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'r16float':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8unorm':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8snorm':               { renderable: false, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8uint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  'rg8sint':                { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  2, blockWidth: 1, blockHeight: 1 },\n  // 32-bit formats\n  'r32uint':                { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'r32sint':                { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'r32float':               { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg16uint':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg16sint':               { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg16float':              { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8unorm':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8unorm-srgb':        { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8snorm':             { renderable: false, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8uint':              { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rgba8sint':              { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'bgra8unorm':             { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'bgra8unorm-srgb':        { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  // Packed 32-bit formats\n  'rgb10a2unorm':           { renderable:  true, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'rg11b10float':           { renderable: false, color:  true, depth: false, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  // 64-bit formats\n  'rg32uint':               { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rg32sint':               { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rg32float':              { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rgba16uint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rgba16sint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  'rgba16float':            { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock:  8, blockWidth: 1, blockHeight: 1 },\n  // 128-bit formats\n  'rgba32uint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock: 16, blockWidth: 1, blockHeight: 1 },\n  'rgba32sint':             { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock: 16, blockWidth: 1, blockHeight: 1 },\n  'rgba32float':            { renderable:  true, color:  true, depth: false, stencil: false, storage:  true, copyable:  true, bytesPerBlock: 16, blockWidth: 1, blockHeight: 1 },\n  // Depth/stencil formats\n  'depth32float':           { renderable:  true, color: false, depth:  true, stencil: false, storage: false, copyable:  true, bytesPerBlock:  4, blockWidth: 1, blockHeight: 1 },\n  'depth24plus':            { renderable:  true, color: false, depth:  true, stencil: false, storage: false, copyable: false,                                                  },\n  'depth24plus-stencil8':   { renderable:  true, color: false, depth:  true, stencil:  true, storage: false, copyable: false,                                                  },\n};\nexport const kTextureFormats = keysOf(kTextureFormatInfo);\n\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\nexport const kTextureUsageInfo: {\n  readonly [k in C.TextureUsage]: {};\n} = {\n  [C.TextureUsage.CopySrc]: {},\n  [C.TextureUsage.CopyDst]: {},\n  [C.TextureUsage.Sampled]: {},\n  [C.TextureUsage.Storage]: {},\n  [C.TextureUsage.OutputAttachment]: {},\n};\nexport const kTextureUsages = numericKeysOf<C.TextureUsage>(kTextureUsageInfo);\n\n// Typedefs for bindings\n\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\ntype ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'plainSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\n\ntype BufferBindingType = 'uniform-buffer' | 'storage-buffer' | 'readonly-storage-buffer';\ntype SamplerBindingType = 'sampler' | 'comparison-sampler';\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'writeonly-storage-texture'\n  | 'readonly-storage-texture';\n\n// Bindings\n\nexport const kMaxBindingsPerBindGroup = 16;\n\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    readonly class: k;\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  4, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  4, },\n};\n\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    readonly class: k;\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\nconst kBindableResource: {\n  readonly [k in BindableResource]: {};\n} = /* prettier-ignore */ {\n  uniformBuf: {}, storageBuf: {}, plainSamp: {}, compareSamp: {}, sampledTex: {}, storageTex: {},\n  errorBuf: {}, errorSamp: {}, errorTex: {},\n};\nexport const kBindableResources = keysOf(kBindableResource);\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:  { resource: 'uniformBuf',  perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:  { resource: 'storageBuf',  perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  plainSamp:   { resource: 'plainSamp',   perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp: { resource: 'compareSamp', perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:  { resource: 'sampledTex',  perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:  { resource: 'storageTex',  perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\ninterface BindingTypeInfo extends BindingKindInfo {\n  readonly validStages: GPUShaderStageFlags;\n  // Add fields as needed\n}\nconst kValidStagesAll = {\n  validStages: C.ShaderStage.Vertex | C.ShaderStage.Fragment | C.ShaderStage.Compute,\n};\nconst kValidStagesStorageWrite = { validStages: C.ShaderStage.Fragment | C.ShaderStage.Compute };\n\nexport const kBufferBindingTypeInfo: {\n  readonly [k in BufferBindingType]: {\n    readonly usage: C.BufferUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'uniform-buffer':          { usage: C.BufferUsage.Uniform, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          },\n  'storage-buffer':          { usage: C.BufferUsage.Storage, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, },\n  'readonly-storage-buffer': { usage: C.BufferUsage.Storage, ...kBindingKind.storageBuf,  ...kValidStagesAll,          },\n};\nexport const kBufferBindingTypes = keysOf(kBufferBindingTypeInfo);\n\nexport const kSamplerBindingTypeInfo: {\n  readonly [k in SamplerBindingType]: {\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampler':                   { ...kBindingKind.plainSamp,   ...kValidStagesAll,     },\n  'comparison-sampler':        { ...kBindingKind.compareSamp, ...kValidStagesAll,     },\n};\nexport const kSamplerBindingTypes = keysOf(kSamplerBindingTypeInfo);\n\nexport const kTextureBindingTypeInfo: {\n  readonly [k in TextureBindingType]: {\n    readonly usage: C.TextureUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampled-texture':           { usage: C.TextureUsage.Sampled, ...kBindingKind.sampledTex,  ...kValidStagesAll,          },\n  'writeonly-storage-texture': { usage: C.TextureUsage.Storage, ...kBindingKind.storageTex,  ...kValidStagesStorageWrite, },\n  'readonly-storage-texture':  { usage: C.TextureUsage.Storage, ...kBindingKind.storageTex,  ...kValidStagesAll,          },\n};\nexport const kTextureBindingTypes = keysOf(kTextureBindingTypeInfo);\n\n// All binding types (merged from above)\n\nexport const kBindingTypeInfo: {\n  readonly [k in GPUBindingType]: BindingTypeInfo;\n} = {\n  ...kBufferBindingTypeInfo,\n  ...kSamplerBindingTypeInfo,\n  ...kTextureBindingTypeInfo,\n};\nexport const kBindingTypes = keysOf(kBindingTypeInfo);\n\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  C.ShaderStage.Vertex,\n  C.ShaderStage.Fragment,\n  C.ShaderStage.Compute,\n];\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n"],"file":"capability_info.js"}