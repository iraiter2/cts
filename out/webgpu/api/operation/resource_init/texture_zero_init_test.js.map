{"version":3,"sources":["../../../../../src/webgpu/api/operation/resource_init/texture_zero_init_test.ts"],"names":["TextureUsage","params","poptions","pbool","assert","unreachable","kTextureAspects","kTextureFormatInfo","kTextureFormats","GPUTest","createTextureUploadBuffer","SubresourceRange","getTexelDataRepresentation","UninitializeMethod","kUninitializeMethods","Object","keys","ReadMethod","kMipLevelCounts","kUninitializedMipRangesToTest","begin","end","kSampleCounts","kUninitializedSliceRangesToTest","kCreationSizes","dimension","sliceCount","InitializedState","initializedStateAsFloat","state","Zero","Canary","initializedStateAsUint","initializedStateAsSint","initializedStateAsColor","format","value","indexOf","initializedStateAsDepth","initializedStateAsStencil","getRequiredTextureUsage","sampleCount","uninitializeMethod","readMethod","usage","CopyDst","Creation","StoreOpClear","OutputAttachment","CopyToBuffer","CopyToTexture","CopySrc","Sample","Sampled","Storage","DepthTest","StencilTest","ColorBlending","copyable","renderable","TextureZeroInitTest","constructor","rec","stateToTexelComponents","R","G","B","A","Depth","Stencil","textureWidth","width","mipLevelCount","nonPowerOfTwo","textureHeight","height","iterateUninitializedSubresources","mipRange","sliceRange","iterateInitializedSubresources","uninitialized","Array","level","length","subresources","slice","each","count","generateTextureViewDescriptorsForRendering","aspect","subresourceRange","viewDescriptor","undefined","baseMipLevel","baseArrayLayer","arrayLayerCount","initializeWithStoreOp","texture","commandEncoder","device","createCommandEncoder","color","beginRenderPass","colorAttachments","attachment","createView","storeOp","loadValue","endPass","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","queue","submit","finish","initializeWithCopy","firstSubresource","next","largestWidth","largestHeight","texelData","Uint8Array","getBytes","buffer","bytesPerRow","rowsPerImage","copyBufferToTexture","mipLevel","arrayLayer","depth","destroy","initializeTexture","discardTexture","desc","generateParams","readMethods","combine","unless","stencil","filter","storage","run","createTexture","size","checkContents"],"mappings":"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","sourcesContent":["import { TextureUsage } from '../../../../common/constants.js';\nimport { TestCaseRecorder } from '../../../../common/framework/logging/test_case_recorder.js';\nimport { params, poptions, pbool } from '../../../../common/framework/params_builder.js';\nimport { CaseParams } from '../../../../common/framework/params_utils.js';\nimport { assert, unreachable } from '../../../../common/framework/util/util.js';\nimport { kTextureAspects, kTextureFormatInfo, kTextureFormats } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { createTextureUploadBuffer } from '../../../util/texture/layout.js';\nimport { BeginEndRange, SubresourceRange } from '../../../util/texture/subresource.js';\nimport { PerTexelComponent, getTexelDataRepresentation } from '../../../util/texture/texelData.js';\n\nenum UninitializeMethod {\n  Creation = 'Creation', // The texture was just created. It is uninitialized.\n  StoreOpClear = 'StoreOpClear', // The texture was rendered to with GPUStoreOp \"clear\"\n}\nconst kUninitializeMethods = Object.keys(UninitializeMethod) as UninitializeMethod[];\n\nexport enum ReadMethod {\n  Sample = 'Sample', // The texture is sampled from\n  CopyToBuffer = 'CopyToBuffer', // The texture is copied to a buffer\n  CopyToTexture = 'CopyToTexture', // The texture is copied to another texture\n  DepthTest = 'DepthTest', // The texture is read as a depth buffer\n  StencilTest = 'StencilTest', // The texture is read as a stencil buffer\n  ColorBlending = 'ColorBlending', // Read the texture by blending as a color attachment\n  Storage = 'Storage', // Read the texture as a storage texture\n}\n\n// Test with these mip level counts\ntype MipLevels = 1 | 5;\nconst kMipLevelCounts: MipLevels[] = [1, 5];\n\n// For each mip level count, define the mip ranges to leave uninitialized.\nconst kUninitializedMipRangesToTest: { [k in MipLevels]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only mip\n  5: [\n    { begin: 0, end: 2 },\n    { begin: 3, end: 4 },\n  ], // Test a range and a single mip\n};\n\n// Test with these sample counts.\ntype SampleCounts = 1 | 4;\nconst kSampleCounts: SampleCounts[] = [1, 4];\n\n// Test with these slice counts. This means the depth of a 3d texture or the number\n// or layers in a 2D or a 1D texture array.\ntype SliceCounts = 1 | 7;\n\n// For each slice count, define the slices to leave uninitialized.\nconst kUninitializedSliceRangesToTest: { [k in SliceCounts]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only slice\n  7: [\n    { begin: 2, end: 4 },\n    { begin: 6, end: 7 },\n  ], // Test a range and a single slice\n};\n\n// Test with these combinations of texture dimension and sliceCount.\nconst kCreationSizes: Array<{\n  dimension: GPUTextureDimension;\n  sliceCount: SliceCounts;\n}> = [\n  // { dimension: '1d', sliceCount: 7 }, // TODO: 1d textures\n  { dimension: '2d', sliceCount: 1 }, // 2d textures\n  { dimension: '2d', sliceCount: 7 }, // 2d array textures\n  // { dimension: '3d', sliceCount: 7 }, // TODO: 3d textures\n];\n\n// Enums to abstract over color / depth / stencil values in textures. Depending on the texture format,\n// the data for each value may have a different representation. These enums are converted to a\n// representation such that their values can be compared. ex.) An integer is needed to upload to an\n// unsigned normalized format, but its value is read as a float in the shader.\nexport const enum InitializedState {\n  Canary, // Set on initialized subresources. It should stay the same. On discarded resources, we should observe zero.\n  Zero, // We check that uninitialized subresources are in this state when read back.\n}\n\nexport function initializedStateAsFloat(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 1;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsUint(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 255;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsSint(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return -1;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsColor(\n  state: InitializedState,\n  format: GPUTextureFormat\n): [number, number, number, number] {\n  let value;\n  if (format.indexOf('uint') !== -1) {\n    value = initializedStateAsUint(state);\n  } else if (format.indexOf('sint') !== -1) {\n    value = initializedStateAsSint(state);\n  } else {\n    value = initializedStateAsFloat(state);\n  }\n  return [value, value, value, value];\n}\n\nexport function initializedStateAsDepth(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 1;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsStencil(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 42;\n    default:\n      unreachable();\n  }\n}\n\ninterface TestParams {\n  format: GPUTextureFormat;\n  aspect: GPUTextureAspect;\n  dimension: GPUTextureDimension;\n  sliceCount: SliceCounts;\n  mipLevelCount: MipLevels;\n  sampleCount: SampleCounts;\n  uninitializeMethod: UninitializeMethod;\n  readMethod: ReadMethod;\n  nonPowerOfTwo: boolean;\n}\n\nfunction getRequiredTextureUsage(\n  format: GPUTextureFormat,\n  sampleCount: SampleCounts,\n  uninitializeMethod: UninitializeMethod,\n  readMethod: ReadMethod\n): GPUTextureUsageFlags {\n  let usage: GPUTextureUsageFlags = TextureUsage.CopyDst;\n\n  switch (uninitializeMethod) {\n    case UninitializeMethod.Creation:\n      break;\n    case UninitializeMethod.StoreOpClear:\n      usage |= TextureUsage.OutputAttachment;\n      break;\n    default:\n      unreachable();\n  }\n\n  switch (readMethod) {\n    case ReadMethod.CopyToBuffer:\n    case ReadMethod.CopyToTexture:\n      usage |= TextureUsage.CopySrc;\n      break;\n    case ReadMethod.Sample:\n      usage |= TextureUsage.Sampled;\n      break;\n    case ReadMethod.Storage:\n      usage |= TextureUsage.Storage;\n      break;\n    case ReadMethod.DepthTest:\n    case ReadMethod.StencilTest:\n    case ReadMethod.ColorBlending:\n      usage |= TextureUsage.OutputAttachment;\n      break;\n    default:\n      unreachable();\n  }\n\n  if (sampleCount > 1) {\n    // Copies to multisampled textures are not allowed. We need OutputAttachment to initialize\n    // canary data in multisampled textures.\n    usage |= TextureUsage.OutputAttachment;\n  }\n\n  if (!kTextureFormatInfo[format].copyable) {\n    // Copies are not possible. We need OutputAttachment to initialize\n    // canary data.\n    assert(kTextureFormatInfo[format].renderable);\n    usage |= TextureUsage.OutputAttachment;\n  }\n\n  return usage;\n}\n\nexport abstract class TextureZeroInitTest extends GPUTest {\n  protected stateToTexelComponents: { [k in InitializedState]: PerTexelComponent<number> };\n\n  constructor(rec: TestCaseRecorder, params: CaseParams) {\n    super(rec, params);\n\n    const stateToTexelComponents = (state: InitializedState) => {\n      const [R, G, B, A] = initializedStateAsColor(state, this.params.format);\n      return {\n        R,\n        G,\n        B,\n        A,\n        Depth: initializedStateAsDepth(state),\n        Stencil: initializedStateAsStencil(state),\n      };\n    };\n\n    this.stateToTexelComponents = {\n      [InitializedState.Zero]: stateToTexelComponents(InitializedState.Zero),\n      [InitializedState.Canary]: stateToTexelComponents(InitializedState.Canary),\n    };\n  }\n\n  get params(): TestParams {\n    return super.params as TestParams;\n  }\n\n  get textureWidth(): number {\n    let width = 1 << this.params.mipLevelCount;\n    if (this.params.nonPowerOfTwo) {\n      width = 2 * width - 1;\n    }\n    return width;\n  }\n\n  get textureHeight(): number {\n    let height = 1 << this.params.mipLevelCount;\n    if (this.params.nonPowerOfTwo) {\n      height = 2 * height - 1;\n    }\n    return height;\n  }\n\n  // Used to iterate subresources and check that their uninitialized contents are zero when accessed\n  *iterateUninitializedSubresources(): Generator<SubresourceRange> {\n    for (const mipRange of kUninitializedMipRangesToTest[this.params.mipLevelCount]) {\n      for (const sliceRange of kUninitializedSliceRangesToTest[this.params.sliceCount]) {\n        yield new SubresourceRange({ mipRange, sliceRange });\n      }\n    }\n  }\n\n  // Used to iterate and initialize other subresources not checked for zero-initialization.\n  // Zero-initialization of uninitialized subresources should not have side effects on already\n  // initialized subresources.\n  *iterateInitializedSubresources(): Generator<SubresourceRange> {\n    const uninitialized: boolean[][] = new Array(this.params.mipLevelCount);\n    for (let level = 0; level < uninitialized.length; ++level) {\n      uninitialized[level] = new Array(this.params.sliceCount);\n    }\n    for (const subresources of this.iterateUninitializedSubresources()) {\n      for (const { level, slice } of subresources.each()) {\n        uninitialized[level][slice] = true;\n      }\n    }\n    for (let level = 0; level < uninitialized.length; ++level) {\n      for (let slice = 0; slice < uninitialized[level].length; ++slice) {\n        if (!uninitialized[level][slice]) {\n          yield new SubresourceRange({\n            mipRange: { begin: level, count: 1 },\n            sliceRange: { begin: slice, count: 1 },\n          });\n        }\n      }\n    }\n  }\n\n  *generateTextureViewDescriptorsForRendering(\n    aspect: GPUTextureAspect,\n    subresourceRange?: SubresourceRange\n  ): Generator<GPUTextureViewDescriptor> {\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      aspect,\n    };\n\n    if (subresourceRange === undefined) {\n      return viewDescriptor;\n    }\n\n    for (const { level, slice } of subresourceRange.each()) {\n      yield {\n        ...viewDescriptor,\n        baseMipLevel: level,\n        mipLevelCount: 1,\n        baseArrayLayer: slice,\n        arrayLayerCount: 1,\n      };\n    }\n  }\n\n  abstract checkContents(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void;\n\n  private initializeWithStoreOp(\n    state: InitializedState,\n    texture: GPUTexture,\n    subresourceRange?: SubresourceRange\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    for (const viewDescriptor of this.generateTextureViewDescriptorsForRendering(\n      this.params.aspect,\n      subresourceRange\n    )) {\n      if (kTextureFormatInfo[this.params.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                attachment: texture.createView(viewDescriptor),\n                storeOp: 'store',\n                loadValue: initializedStateAsColor(state, this.params.format),\n              },\n            ],\n          })\n          .endPass();\n      } else {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n              attachment: texture.createView(viewDescriptor),\n              depthStoreOp: 'store',\n              depthLoadValue: initializedStateAsDepth(state),\n              stencilStoreOp: 'store',\n              stencilLoadValue: initializedStateAsStencil(state),\n            },\n          })\n          .endPass();\n      }\n    }\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  private initializeWithCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (this.params.dimension === '1d' || this.params.dimension === '3d') {\n      // TODO: https://github.com/gpuweb/gpuweb/issues/69\n      // Copies with 1D and 3D textures are not yet specified\n      unreachable();\n    }\n\n    const firstSubresource = subresourceRange.each().next().value;\n    assert(typeof firstSubresource !== 'undefined');\n\n    const largestWidth = this.textureWidth >> firstSubresource.level;\n    const largestHeight = this.textureHeight >> firstSubresource.level;\n\n    const texelData = new Uint8Array(\n      getTexelDataRepresentation(this.params.format).getBytes(this.stateToTexelComponents[state])\n    );\n    const { buffer, bytesPerRow, rowsPerImage } = createTextureUploadBuffer(\n      texelData,\n      this.device,\n      this.params.format,\n      this.params.dimension,\n      [largestWidth, largestHeight, 1]\n    );\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const { level, slice } of subresourceRange.each()) {\n      const width = this.textureWidth >> level;\n      const height = this.textureHeight >> level;\n\n      commandEncoder.copyBufferToTexture(\n        {\n          buffer,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        { texture, mipLevel: level, arrayLayer: slice },\n        { width, height, depth: 1 }\n      );\n    }\n    this.queue.submit([commandEncoder.finish()]);\n    buffer.destroy();\n  }\n\n  initializeTexture(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (this.params.sampleCount > 1 || !kTextureFormatInfo[this.params.format].copyable) {\n      // Copies to multisampled textures not yet specified.\n      // Use a storeOp for now.\n      assert(kTextureFormatInfo[this.params.format].renderable);\n      this.initializeWithStoreOp(state, texture, subresourceRange);\n    } else {\n      this.initializeWithCopy(texture, state, subresourceRange);\n    }\n  }\n\n  discardTexture(texture: GPUTexture, subresourceRange: SubresourceRange): void {\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const desc of this.generateTextureViewDescriptorsForRendering(\n      this.params.aspect,\n      subresourceRange\n    )) {\n      if (kTextureFormatInfo[this.params.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                attachment: texture.createView(desc),\n                storeOp: 'clear',\n                loadValue: 'load',\n              },\n            ],\n          })\n          .endPass();\n      } else {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n              attachment: texture.createView(desc),\n              depthStoreOp: 'clear',\n              depthLoadValue: 'load',\n              stencilStoreOp: 'clear',\n              stencilLoadValue: 'load',\n            },\n          })\n          .endPass();\n      }\n    }\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  static generateParams(readMethods: ReadMethod[]) {\n    return (\n      // TODO: Consider making a list of \"valid\" texture descriptors in capability_info.\n      params()\n        .combine(poptions('format', kTextureFormats))\n        .combine(poptions('aspect', kTextureAspects))\n        .unless(\n          ({ format, aspect }) =>\n            (aspect === 'depth-only' && !kTextureFormatInfo[format].depth) ||\n            (aspect === 'stencil-only' && !kTextureFormatInfo[format].stencil)\n        )\n        .combine(poptions('mipLevelCount', kMipLevelCounts))\n        .combine(poptions('sampleCount', kSampleCounts))\n        // Multisampled textures may only have one mip\n        .unless(({ sampleCount, mipLevelCount }) => sampleCount > 1 && mipLevelCount > 1)\n        .combine(poptions('uninitializeMethod', kUninitializeMethods))\n        .combine(poptions('readMethod', readMethods))\n        .unless(\n          ({ readMethod, format }) =>\n            // It doesn't make sense to copy from a packed depth format.\n            // This is not specified yet, but it will probably be disallowed as the bits may\n            // be vendor-specific.\n            // TODO: Test copying out of the stencil aspect.\n            (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture) &&\n            (format === 'depth24plus' || format === 'depth24plus-stencil8')\n        )\n        .unless(\n          ({ readMethod, format }) =>\n            (readMethod === ReadMethod.DepthTest && !kTextureFormatInfo[format].depth) ||\n            (readMethod === ReadMethod.StencilTest && !kTextureFormatInfo[format].stencil) ||\n            (readMethod === ReadMethod.ColorBlending && !kTextureFormatInfo[format].color) ||\n            // TODO: Test with depth sampling\n            (readMethod === ReadMethod.Sample && kTextureFormatInfo[format].depth)\n        )\n        .unless(\n          ({ readMethod, sampleCount }) =>\n            // We can only read from multisampled textures by sampling.\n            sampleCount > 1 &&\n            (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture)\n        )\n        .combine(kCreationSizes)\n        // Multisampled 3D / 2D array textures not supported.\n        .unless(({ sampleCount, sliceCount }) => sampleCount > 1 && sliceCount > 1)\n        .filter(({ format, sampleCount, uninitializeMethod, readMethod }) => {\n          const usage = getRequiredTextureUsage(\n            format,\n            sampleCount,\n            uninitializeMethod,\n            readMethod\n          );\n\n          if (usage & TextureUsage.OutputAttachment && !kTextureFormatInfo[format].renderable) {\n            return false;\n          }\n\n          if (usage & TextureUsage.Storage && !kTextureFormatInfo[format].storage) {\n            return false;\n          }\n\n          return true;\n        })\n        .combine(pbool('nonPowerOfTwo'))\n    );\n  }\n\n  run(): void {\n    const {\n      format,\n      dimension,\n      mipLevelCount,\n      sliceCount,\n      sampleCount,\n      uninitializeMethod,\n      readMethod,\n    } = this.params;\n\n    const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n\n    const texture = this.device.createTexture({\n      size: [this.textureWidth, this.textureHeight, sliceCount],\n      format,\n      dimension,\n      usage,\n      mipLevelCount,\n      sampleCount,\n    });\n\n    // Initialize some subresources with canary values\n    for (const subresourceRange of this.iterateInitializedSubresources()) {\n      this.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n    }\n\n    switch (uninitializeMethod) {\n      case UninitializeMethod.Creation:\n        break;\n      case UninitializeMethod.StoreOpClear:\n        // Initialize the rest of the resources.\n        for (const subresourceRange of this.iterateUninitializedSubresources()) {\n          this.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n        }\n        // Then use a store op to discard their contents.\n        for (const subresourceRange of this.iterateUninitializedSubresources()) {\n          this.discardTexture(texture, subresourceRange);\n        }\n        break;\n      default:\n        unreachable();\n    }\n\n    // Check that all uninitialized resources are zero.\n    for (const subresourceRange of this.iterateUninitializedSubresources()) {\n      this.checkContents(texture, InitializedState.Zero, subresourceRange);\n    }\n\n    // Check the all other resources are unchanged.\n    for (const subresourceRange of this.iterateInitializedSubresources()) {\n      this.checkContents(texture, InitializedState.Canary, subresourceRange);\n    }\n  }\n}\n"],"file":"texture_zero_init_test.js"}