{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map_detach.spec.ts"],"names":["description","makeTestGroup","GPUTest","F","checkDetach","buffer","arrayBuffer","unmap","destroy","view","Uint8Array","expect","byteLength","length","g","test","params","fn","t","device","createBuffer","size","usage","GPUBufferUsage","MAP_WRITE","mapWriteAsync","MAP_READ","mapReadAsync","desc","createBufferMapped"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nclass F extends GPUTest {\n  checkDetach(buffer: GPUBuffer, arrayBuffer: ArrayBuffer, unmap: boolean, destroy: boolean): void {\n    const view = new Uint8Array(arrayBuffer);\n    this.expect(arrayBuffer.byteLength === 4);\n    this.expect(view.length === 4);\n\n    if (unmap) buffer.unmap();\n    if (destroy) buffer.destroy();\n\n    this.expect(arrayBuffer.byteLength === 0, 'ArrayBuffer should be detached');\n    this.expect(view.byteLength === 0, 'ArrayBufferView should be detached');\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('mapWriteAsync')\n  .params([\n    { unmap: true, destroy: false }, //\n    { unmap: false, destroy: true },\n    { unmap: true, destroy: true },\n  ])\n  .fn(async t => {\n    const buffer = t.device.createBuffer({ size: 4, usage: GPUBufferUsage.MAP_WRITE });\n    const arrayBuffer = await buffer.mapWriteAsync();\n    t.checkDetach(buffer, arrayBuffer, t.params.unmap, t.params.destroy);\n  });\n\ng.test('mapReadAsync')\n  .params([\n    { unmap: true, destroy: false }, //\n    { unmap: false, destroy: true },\n    { unmap: true, destroy: true },\n  ])\n  .fn(async t => {\n    const buffer = t.device.createBuffer({ size: 4, usage: GPUBufferUsage.MAP_READ });\n    const arrayBuffer = await buffer.mapReadAsync();\n    t.checkDetach(buffer, arrayBuffer, t.params.unmap, t.params.destroy);\n  });\n\ng.test('create_mapped')\n  .params([\n    { unmap: true, destroy: false },\n    { unmap: false, destroy: true },\n    { unmap: true, destroy: true },\n  ])\n  .fn(async t => {\n    const desc = {\n      size: 4,\n      usage: GPUBufferUsage.MAP_WRITE,\n    };\n    const [buffer, arrayBuffer] = t.device.createBufferMapped(desc);\n\n    const view = new Uint8Array(arrayBuffer);\n    t.expect(arrayBuffer.byteLength === 4);\n    t.expect(view.length === 4);\n\n    if (t.params.unmap) buffer.unmap();\n    if (t.params.destroy) buffer.destroy();\n    t.expect(arrayBuffer.byteLength === 0, 'ArrayBuffer should be detached');\n    t.expect(view.byteLength === 0, 'ArrayBufferView should be detached');\n  });\n"],"file":"map_detach.spec.js"}