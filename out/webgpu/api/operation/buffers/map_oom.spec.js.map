{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map_oom.spec.ts"],"names":["description","makeTestGroup","GPUTest","getBufferDesc","usage","size","Number","MAX_SAFE_INTEGER","g","test","fn","t","buffer","expectGPUError","device","createBuffer","GPUBufferUsage","MAP_WRITE","shouldReject","mapWriteAsync","MAP_READ","mapReadAsync","shouldThrow","createBufferMapped","COPY_SRC"],"mappings":";;;;AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAAwE;AACtE,SAAO;AACLC,IAAAA,IAAI,EAAEC,MAAM,CAACC,gBADR;AAELH,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,MAAMI,CAAC,GAAGP,aAAa,CAACC,OAAD,CAAvB;AAEPM,CAAC,CAACC,IAAF,CAAO,eAAP,EAAwBC,EAAxB,CAA2B,MAAMC,CAAN,IAAW;AACpC,QAAMC,MAAM,GAAGD,CAAC,CAACE,cAAF,CAAiB,eAAjB,EAAkC,MAAM;AACrD,WAAOF,CAAC,CAACG,MAAF,CAASC,YAAT,CAAsBZ,aAAa,CAACa,cAAc,CAACC,SAAhB,CAAnC,CAAP;AACD,GAFc,CAAf;AAGAN,EAAAA,CAAC,CAACO,YAAF,CAAe,gBAAf,EAAiCN,MAAM,CAACO,aAAP,EAAjC;AACD,CALD;AAOAX,CAAC,CAACC,IAAF,CAAO,cAAP,EAAuBC,EAAvB,CAA0B,MAAMC,CAAN,IAAW;AACnC,QAAMC,MAAM,GAAGD,CAAC,CAACE,cAAF,CAAiB,eAAjB,EAAkC,MAAM;AACrD,WAAOF,CAAC,CAACG,MAAF,CAASC,YAAT,CAAsBZ,aAAa,CAACa,cAAc,CAACI,QAAhB,CAAnC,CAAP;AACD,GAFc,CAAf;AAGAT,EAAAA,CAAC,CAACO,YAAF,CAAe,gBAAf,EAAiCN,MAAM,CAACS,YAAP,EAAjC;AACD,CALD;AAOAb,CAAC,CAACC,IAAF,CAAO,oBAAP,EAA6BC,EAA7B,CAAgC,MAAMC,CAAN,IAAW;AACzCA,EAAAA,CAAC,CAACW,WAAF,CAAc,YAAd,EAA4B,MAAM;AAChCX,IAAAA,CAAC,CAACG,MAAF,CAASS,kBAAT,CAA4BpB,aAAa,CAACa,cAAc,CAACQ,QAAhB,CAAzC;AACD,GAFD;AAGD,CAJD","sourcesContent":["export const description = '';\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nfunction getBufferDesc(usage: GPUBufferUsageFlags): GPUBufferDescriptor {\n  return {\n    size: Number.MAX_SAFE_INTEGER,\n    usage,\n  };\n}\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('mapWriteAsync').fn(async t => {\n  const buffer = t.expectGPUError('out-of-memory', () => {\n    return t.device.createBuffer(getBufferDesc(GPUBufferUsage.MAP_WRITE));\n  });\n  t.shouldReject('OperationError', buffer.mapWriteAsync());\n});\n\ng.test('mapReadAsync').fn(async t => {\n  const buffer = t.expectGPUError('out-of-memory', () => {\n    return t.device.createBuffer(getBufferDesc(GPUBufferUsage.MAP_READ));\n  });\n  t.shouldReject('OperationError', buffer.mapReadAsync());\n});\n\ng.test('createBufferMapped').fn(async t => {\n  t.shouldThrow('RangeError', () => {\n    t.device.createBufferMapped(getBufferDesc(GPUBufferUsage.COPY_SRC));\n  });\n});\n"],"file":"map_oom.spec.js"}