{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map.spec.ts"],"names":["description","pbool","poptions","params","makeTestGroup","MappingTest","g","test","fn","t","size","buffer","device","createBuffer","usage","GPUBufferUsage","COPY_SRC","MAP_WRITE","arrayBuffer","mapWriteAsync","checkMapWrite","init","createBufferMapped","COPY_DST","MAP_READ","expected","Uint32Array","ArrayBuffer","data","i","length","unmap","actual","Uint8Array","mapReadAsync","expectBuffer","combine","mappable"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { pbool, poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\n\nimport { MappingTest } from './mapping_test.js';\n\nexport const g = makeTestGroup(MappingTest);\n\ng.test('mapWriteAsync')\n  .params(poptions('size', [12, 512 * 1024]))\n  .fn(async t => {\n    const { size } = t.params;\n    const buffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    const arrayBuffer = await buffer.mapWriteAsync();\n    t.checkMapWrite(buffer, arrayBuffer, size);\n  });\n\ng.test('mapReadAsync')\n  .params(poptions('size', [12, 512 * 1024]))\n  .fn(async t => {\n    const { size } = t.params;\n\n    const [buffer, init] = t.device.createBufferMapped({\n      size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const expected = new Uint32Array(new ArrayBuffer(size));\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    const actual = new Uint8Array(await buffer.mapReadAsync());\n    t.expectBuffer(actual, new Uint8Array(expected.buffer));\n  });\n\ng.test('createBufferMapped')\n  .params(\n    params()\n      .combine(poptions('size', [12, 512 * 1024]))\n      .combine(pbool('mappable'))\n  )\n  .fn(async t => {\n    const { size, mappable } = t.params;\n    const [buffer, arrayBuffer] = t.device.createBufferMapped({\n      size,\n      usage: GPUBufferUsage.COPY_SRC | (mappable ? GPUBufferUsage.MAP_WRITE : 0),\n    });\n    t.checkMapWrite(buffer, arrayBuffer, size);\n  });\n"],"file":"map.spec.js"}