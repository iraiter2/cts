{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","poptions","makeTestGroup","kTextureFormatInfo","kTextureFormats","ValidationTest","F","getDescriptor","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","size","depth","dimension","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","g","test","params","_success","fn","t","descriptor","expectValidationError","device","createTexture","texture","destroy","destroyBeforeEncode","destroyAfterEncode","textureView","createView","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","endPass","commandBuffer","finish","queue","submit","info","renderable"],"mappings":"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","sourcesContent":["export const description = `\ncreateTexture validation tests.\n`;\n\nimport { poptions } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { kTextureFormatInfo, kTextureFormats } from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getDescriptor(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n    } = {}\n  ): GPUTextureDescriptor {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n    } = options;\n    return {\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('validation_of_sampleCount')\n  .params([\n    // TODO: Consider making a list of \"valid\"+\"invalid\" texture descriptors in capability_info.\n    { sampleCount: 0, _success: false }, // sampleCount of 0 is not allowed\n    { sampleCount: 1, _success: true }, // sampleCount of 1 is allowed\n    { sampleCount: 2, _success: false }, // sampleCount of 2 is not allowed\n    { sampleCount: 3, _success: false }, // sampleCount of 3 is not allowed\n    { sampleCount: 4, _success: true }, // sampleCount of 4 is allowed\n    { sampleCount: 8, _success: false }, // sampleCount of 8 is not allowed\n    { sampleCount: 16, _success: false }, // sampleCount of 16 is not allowed\n    { sampleCount: 4, mipLevelCount: 2, _success: false }, // multisampled multi-level not allowed\n    { sampleCount: 4, arrayLayerCount: 2, _success: false }, // multisampled multi-layer is not allowed\n  ])\n  .fn(async t => {\n    const { sampleCount, mipLevelCount, arrayLayerCount, _success } = t.params;\n\n    const descriptor = t.getDescriptor({ sampleCount, mipLevelCount, arrayLayerCount });\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('validation_of_mipLevelCount')\n  .params([\n    { width: 32, height: 32, mipLevelCount: 1, _success: true }, // mipLevelCount of 1 is allowed\n    { width: 32, height: 32, mipLevelCount: 0, _success: false }, // mipLevelCount of 0 is not allowed\n    { width: 32, height: 32, mipLevelCount: 6, _success: true }, // full mip chains are allowed (Mip level sizes: 32, 16, 8, 4, 2, 1)\n    { width: 31, height: 32, mipLevelCount: 6, _success: true }, // full mip chains are allowed (Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1)\n    { width: 32, height: 31, mipLevelCount: 6, _success: true }, // full mip chains are allowed (Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1)\n    { width: 31, height: 32, mipLevelCount: 7, _success: false }, // too big mip chains on width are disallowed (Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1, ?x?)\n    { width: 32, height: 31, mipLevelCount: 7, _success: false }, // too big mip chains on height are disallowed (Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1, ?x?)\n    { width: 32, height: 32, mipLevelCount: 100, _success: false }, // undefined shift check if miplevel is bigger than the integer bit width\n    { width: 32, height: 8, mipLevelCount: 6, _success: true }, // non square mip map halves the resolution until a 1x1 dimension. (Mip maps: 32 * 8, 16 * 4, 8 * 2, 4 * 1, 2 * 1, 1 * 1)\n  ])\n  .fn(async t => {\n    const { width, height, mipLevelCount, _success } = t.params;\n\n    const descriptor = t.getDescriptor({ width, height, mipLevelCount });\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('it_is_valid_to_destroy_a_texture').fn(t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n});\n\ng.test('it_is_valid_to_destroy_a_destroyed_texture').fn(t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n  texture.destroy();\n});\n\ng.test('it_is_invalid_to_submit_a_destroyed_texture_before_and_after_encode')\n  .params([\n    { destroyBeforeEncode: false, destroyAfterEncode: false, _success: true },\n    { destroyBeforeEncode: true, destroyAfterEncode: false, _success: false },\n    { destroyBeforeEncode: false, destroyAfterEncode: true, _success: false },\n  ])\n  .fn(async t => {\n    const { destroyBeforeEncode, destroyAfterEncode, _success } = t.params;\n\n    const descriptor = t.getDescriptor();\n    const texture = t.device.createTexture(descriptor);\n    const textureView = texture.createView();\n\n    if (destroyBeforeEncode) {\n      texture.destroy();\n    }\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: textureView,\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    renderPass.endPass();\n    const commandBuffer = commandEncoder.finish();\n\n    if (destroyAfterEncode) {\n      texture.destroy();\n    }\n\n    t.expectValidationError(() => {\n      t.queue.submit([commandBuffer]);\n    }, !_success);\n  });\n\ng.test('it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format')\n  .params(poptions('format', kTextureFormats))\n  .fn(async t => {\n    const format: GPUTextureFormat = t.params.format;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ width: 1, height: 1, format });\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !info.renderable);\n  });\n\n// TODO: Add tests for compressed texture formats\n"],"file":"createTexture.spec.js"}