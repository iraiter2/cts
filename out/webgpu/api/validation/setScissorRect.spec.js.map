{"version":3,"sources":["../../../../src/webgpu/api/validation/setScissorRect.spec.ts"],"names":["description","makeTestGroup","ValidationTest","TEXTURE_WIDTH","TEXTURE_HEIGHT","F","beginRenderPass","commandEncoder","attachmentTexture","device","createTexture","format","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachments","attachment","createView","loadValue","r","g","b","a","test","params","x","y","_success","fn","t","createCommandEncoder","renderPass","setScissorRect","endPass","expectValidationError","finish"],"mappings":"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","sourcesContent":["export const description = `\nsetScissorRect validation tests.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst TEXTURE_WIDTH: number = 16;\nconst TEXTURE_HEIGHT: number = 16;\n\n// TODO: Move this fixture class to a common file.\nclass F extends ValidationTest {\n  beginRenderPass(commandEncoder: GPUCommandEncoder): GPURenderPassEncoder {\n    const attachmentTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: TEXTURE_WIDTH, height: TEXTURE_HEIGHT, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: attachmentTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('use_of_setScissorRect')\n  .params([\n    { x: 0, y: 0, width: 1, height: 1, _success: true }, // Basic use\n    { x: 0, y: 0, width: 0, height: 1, _success: false }, // Width of zero is not allowed\n    { x: 0, y: 0, width: 1, height: 0, _success: false }, // Height of zero is not allowed\n    { x: 0, y: 0, width: 0, height: 0, _success: false }, // Both width and height of zero are not allowed\n    { x: 0, y: 0, width: TEXTURE_WIDTH + 1, height: TEXTURE_HEIGHT + 1, _success: true }, // Scissor larger than the framebuffer is allowed\n  ])\n  .fn(async t => {\n    const { x, y, width, height, _success } = t.params;\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setScissorRect(x, y, width, height);\n    renderPass.endPass();\n\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !_success);\n  });\n"],"file":"setScissorRect.spec.js"}