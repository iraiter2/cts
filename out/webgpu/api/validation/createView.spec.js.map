{"version":3,"sources":["../../../../src/webgpu/api/validation/createView.spec.ts"],"names":["description","makeTestGroup","ValidationTest","ARRAY_LAYER_COUNT_2D","MIP_LEVEL_COUNT","FORMAT","F","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","device","size","depth","dimension","format","usage","GPUTextureUsage","SAMPLED","getDescriptor","baseMipLevel","baseArrayLayer","g","test","params","_success","fn","t","texture","descriptor","expectValidationError","createView","nonSquareTexture","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","endPass","destroy","finish"],"mappings":"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","sourcesContent":["export const description = `\ncreateView validation tests.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst ARRAY_LAYER_COUNT_2D = 6;\nconst MIP_LEVEL_COUNT: number = 6;\nconst FORMAT: GPUTextureFormat = 'rgba8unorm';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = MIP_LEVEL_COUNT,\n      sampleCount = 1,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format: FORMAT,\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getDescriptor(\n    options: {\n      format?: GPUTextureFormat;\n      dimension?: GPUTextureViewDimension;\n      baseMipLevel?: number;\n      mipLevelCount?: number;\n      baseArrayLayer?: number;\n      arrayLayerCount?: number;\n    } = {}\n  ): GPUTextureViewDescriptor {\n    const {\n      format = FORMAT,\n      dimension = '2d',\n      baseMipLevel = 0,\n      mipLevelCount = MIP_LEVEL_COUNT,\n      baseArrayLayer = 0,\n      arrayLayerCount = 1,\n    } = options;\n    return {\n      format,\n      dimension,\n      baseMipLevel,\n      mipLevelCount,\n      baseArrayLayer,\n      arrayLayerCount,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('creating_texture_view_on_a_2D_non_array_texture')\n  .params([\n    { _success: true }, // default view works\n    { arrayLayerCount: 1, _success: true }, // it is OK to create a 2D texture view on a 2D texture\n    { arrayLayerCount: 2, _success: false }, // it is an error to view a layer past the end of the texture\n    { dimension: '2d-array' as const, arrayLayerCount: 1, _success: true }, // it is OK to create a 1-layer 2D array texture view on a 2D texture\n    // mip level is in range\n    { mipLevelCount: 1, baseMipLevel: MIP_LEVEL_COUNT - 1, _success: true },\n    { mipLevelCount: 2, baseMipLevel: MIP_LEVEL_COUNT - 2, _success: true },\n    // baseMipLevel == k && mipLevelCount == 0 means to use levels k..end\n    { mipLevelCount: 0, baseMipLevel: 0, _success: true },\n    { mipLevelCount: 0, baseMipLevel: 1, _success: true },\n    { mipLevelCount: 0, baseMipLevel: MIP_LEVEL_COUNT - 1, _success: true },\n    { mipLevelCount: 0, baseMipLevel: MIP_LEVEL_COUNT, _success: false },\n    // it is an error to make the mip level out of range\n    { mipLevelCount: MIP_LEVEL_COUNT + 1, baseMipLevel: 0, _success: false },\n    { mipLevelCount: MIP_LEVEL_COUNT, baseMipLevel: 1, _success: false },\n    { mipLevelCount: 2, baseMipLevel: MIP_LEVEL_COUNT - 1, _success: false },\n    { mipLevelCount: 1, baseMipLevel: MIP_LEVEL_COUNT, _success: false },\n  ])\n  .fn(async t => {\n    const { dimension = '2d', arrayLayerCount, mipLevelCount, baseMipLevel, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 1 });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n      mipLevelCount,\n      baseMipLevel,\n    });\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('creating_texture_view_on_a_2D_array_texture')\n  .params([\n    { _success: true }, // default view works\n    { dimension: '2d' as const, arrayLayerCount: 1, _success: true }, // it is OK to create a 2D texture view on a 2D array texture\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, _success: true }, // it is OK to create a 2D array texture view on a 2D array texture\n    // baseArrayLayer == k && arrayLayerCount == 0 means to use layers k..end.\n    { arrayLayerCount: 0, baseArrayLayer: 0, _success: true },\n    { arrayLayerCount: 0, baseArrayLayer: 1, _success: true },\n    { arrayLayerCount: 0, baseArrayLayer: ARRAY_LAYER_COUNT_2D - 1, _success: true },\n    { arrayLayerCount: 0, baseArrayLayer: ARRAY_LAYER_COUNT_2D, _success: false },\n    // It is an error for the array layer range of the view to exceed that of the texture\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D + 1, baseArrayLayer: 0, _success: false },\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, baseArrayLayer: 1, _success: false },\n    { arrayLayerCount: 2, baseArrayLayer: ARRAY_LAYER_COUNT_2D - 1, _success: false },\n    { arrayLayerCount: 1, baseArrayLayer: ARRAY_LAYER_COUNT_2D, _success: false },\n  ])\n  .fn(async t => {\n    const { dimension = '2d-array', arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT_2D });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n      baseArrayLayer,\n    });\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer')\n  .params([\n    { _success: true },\n    { format: 'rgba8unorm', _success: true },\n    { format: 'r8unorm', _success: false },\n    { dimension: '2d-array', _success: true },\n    { dimension: '2d', _success: false },\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, _success: false }, // setting array layers to non-0 means the dimensionality will default to 2D so by itself it causes an error.\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, dimension: '2d-array', _success: true },\n    {\n      arrayLayerCount: ARRAY_LAYER_COUNT_2D,\n      dimension: '2d-array',\n      mipLevelCount: MIP_LEVEL_COUNT,\n      _success: true,\n    },\n  ] as const)\n  .fn(async t => {\n    const { format, dimension, arrayLayerCount, mipLevelCount, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT_2D });\n\n    const descriptor = { format, dimension, arrayLayerCount, mipLevelCount };\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer')\n  .params([\n    { _success: true },\n    { format: 'rgba8unorm', _success: true },\n    { format: 'r8unorm', _success: false },\n    { dimension: '2d-array', _success: true },\n    { dimension: '2d', _success: true },\n    { arrayLayerCount: 0, _success: true },\n    { arrayLayerCount: 1, _success: true },\n    { arrayLayerCount: 2, _success: false },\n    { mipLevelCount: MIP_LEVEL_COUNT, _success: true },\n    { mipLevelCount: 1, _success: true },\n  ] as const)\n  .fn(async t => {\n    const { format, dimension, arrayLayerCount, mipLevelCount, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 1 });\n\n    const descriptor = { format, dimension, arrayLayerCount, mipLevelCount };\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('creating_cube_map_texture_view')\n  .params([\n    { dimension: 'cube', arrayLayerCount: 6, _success: true }, // it is OK to create a cube map texture view with arrayLayerCount == 6\n    // it is an error to create a cube map texture view with arrayLayerCount != 6\n    { dimension: 'cube', arrayLayerCount: 3, _success: false },\n    { dimension: 'cube', arrayLayerCount: 7, _success: false },\n    { dimension: 'cube', arrayLayerCount: 12, _success: false },\n    { dimension: 'cube', _success: false },\n    { dimension: 'cube-array', arrayLayerCount: 12, _success: true }, // it is OK to create a cube map array texture view with arrayLayerCount % 6 == 0\n    // it is an error to create a cube map array texture view with arrayLayerCount % 6 != 0\n    { dimension: 'cube-array', arrayLayerCount: 11, _success: false },\n    { dimension: 'cube-array', arrayLayerCount: 13, _success: false },\n  ] as const)\n  .fn(async t => {\n    const { dimension = '2d-array', arrayLayerCount, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 16 });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n    });\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('creating_cube_map_texture_view_with_a_non_square_texture')\n  .params([\n    { dimension: 'cube', arrayLayerCount: 6 }, // it is an error to create a cube map texture view with width != height.\n    { dimension: 'cube-array', arrayLayerCount: 12 }, // it is an error to create a cube map array texture view with width != height.\n  ] as const)\n  .fn(async t => {\n    const { dimension, arrayLayerCount } = t.params;\n\n    const nonSquareTexture = t.createTexture({\n      arrayLayerCount: 18,\n      width: 32,\n      height: 16,\n      mipLevelCount: 5,\n    });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n    });\n\n    t.expectValidationError(() => {\n      nonSquareTexture.createView(descriptor);\n    });\n  });\n\n// TODO: add more tests when rules are fully implemented.\ng.test('test_the_format_compatibility_rules_when_creating_a_texture_view').fn(async t => {\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const descriptor = t.getDescriptor({\n    format: 'depth24plus-stencil8',\n  });\n\n  // it is invalid to create a view in depth-stencil format on a RGBA texture\n  t.expectValidationError(() => {\n    texture.createView(descriptor);\n  });\n});\n\ng.test('it_is_invalid_to_use_a_texture_view_created_from_a_destroyed_texture').fn(async t => {\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const commandEncoder = t.device.createCommandEncoder();\n  const renderPass = commandEncoder.beginRenderPass({\n    colorAttachments: [\n      {\n        attachment: texture.createView(),\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  });\n  renderPass.endPass();\n\n  texture.destroy();\n\n  t.expectValidationError(() => {\n    commandEncoder.finish();\n  });\n});\n\n// TODO: Add tests for TextureAspect\n"],"file":"createView.spec.js"}