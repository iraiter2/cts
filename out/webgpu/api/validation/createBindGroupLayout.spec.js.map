{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"names":["description","poptions","params","makeTestGroup","kBindingTypeInfo","kBindingTypes","kMaxBindingsPerBindGroup","kShaderStages","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","fn","t","goodDescriptor","entries","binding","visibility","GPUShaderStage","COMPUTE","type","device","createBindGroupLayout","badDescriptor","expectValidationError","maxDynamicBufferCount","maxDynamicBufferBindings","i","push","hasDynamicOffset","length","success","perPipelineLimitClass","maxDynamic","FRAGMENT","pickExtraBindingTypes","bindingType","extraTypeSame","info","extraBindingType","perStageLimitClass","class","kCasesForMaxResourcesPerStageTests","combine","filter","p","maxedType","validStages","maxedVisibility","expand","extraType","extraVisibility","maxedTypeInfo","maxedCount","max","extraTypeInfo","maxResourceBindings","storageTextureFormat","resource","undefined","newDescriptor","shouldError","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","newBindingCountsTowardSamePerStageLimit","layoutExceedsPerStageLimit"],"mappings":";;;;AAAA,OAAO,MAAMA,WAAW,GAAI;;CAArB;AAIP,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,6CAAjC;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,wBAHF,EAIEC,aAJF,QAKO,0BALP;AAOA,SAASC,cAAT,QAA+B,sBAA/B;;AAEA,SAASC,KAAT,CAAuDC,UAAvD,EAAyE;AACvE,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,UAAf,CAAX,CAAP;AACD;;AAED,OAAO,MAAMI,CAAC,GAAGX,aAAa,CAACK,cAAD,CAAvB;AAEPM,CAAC,CAACC,IAAF,CAAO,iDAAP,EAA0DC,EAA1D,CAA6D,MAAMC,CAAN,IAAW;AACtE,QAAMC,cAAc,GAAG;AACrBC,IAAAA,OAAO,EAAE,CACP;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,UAAU,EAAEC,cAAc,CAACC,OAAzC;AAAkDC,MAAAA,IAAI,EAAE;AAAxD,KADO,EAEP;AAAEJ,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,UAAU,EAAEC,cAAc,CAACC,OAAzC;AAAkDC,MAAAA,IAAI,EAAE;AAAxD,KAFO;AADY,GAAvB,CADsE,CAQtE;;AACAP,EAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BR,cAA/B;AAEA,QAAMS,aAAa,GAAGlB,KAAK,CAACS,cAAD,CAA3B;AACAS,EAAAA,aAAa,CAACR,OAAd,CAAsB,CAAtB,EAAyBC,OAAzB,GAAmC,CAAnC,CAZsE,CActE;;AACAH,EAAAA,CAAC,CAACW,qBAAF,CAAwB,MAAM;AAC5BX,IAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BC,aAA/B;AACD,GAFD;AAGD,CAlBD;AAoBAb,CAAC,CAACC,IAAF,CAAO,iCAAP,EAA0CC,EAA1C,CAA6C,MAAMC,CAAN,IAAW;AACtDA,EAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+B;AAC7BP,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,UAAU,EAAE,CAA1B;AAA6BG,MAAAA,IAAI,EAAE;AAAnC,KAAD;AADoB,GAA/B;AAGD,CAJD;AAMAV,CAAC,CAACC,IAAF,CAAO,qDAAP,EACGb,MADH,CACU,CACN;AAAEsB,EAAAA,IAAI,EAAE,gBAAR;AAAmCK,EAAAA,qBAAqB,EAAE;AAA1D,CADM,EAEN;AAAEL,EAAAA,IAAI,EAAE,gBAAR;AAAmCK,EAAAA,qBAAqB,EAAE;AAA1D,CAFM,CADV,EAKGb,EALH,CAKM,MAAMC,CAAN,IAAW;AACb,QAAM;AAAEO,IAAAA,IAAF;AAAQK,IAAAA;AAAR,MAAkCZ,CAAC,CAACf,MAA1C;AAEA,QAAM4B,wBAAmD,GAAG,EAA5D;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,qBAApB,EAA2CE,CAAC,EAA5C,EAAgD;AAC9CD,IAAAA,wBAAwB,CAACE,IAAzB,CAA8B;AAC5BZ,MAAAA,OAAO,EAAEW,CADmB;AAE5BV,MAAAA,UAAU,EAAEC,cAAc,CAACC,OAFC;AAG5BC,MAAAA,IAH4B;AAI5BS,MAAAA,gBAAgB,EAAE;AAJU,KAA9B;AAMD;;AAED,QAAMf,cAAc,GAAG;AACrBC,IAAAA,OAAO,EAAE,CACP,GAAGW,wBADI,EAEP;AACEV,MAAAA,OAAO,EAAEU,wBAAwB,CAACI,MADpC;AAEEb,MAAAA,UAAU,EAAEC,cAAc,CAACC,OAF7B;AAGEC,MAAAA,IAHF;AAIES,MAAAA,gBAAgB,EAAE;AAJpB,KAFO;AADY,GAAvB,CAba,CAyBb;;AACAhB,EAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BR,cAA/B,EA1Ba,CA4Bb;;AACA,QAAMS,aAAa,GAAGlB,KAAK,CAACS,cAAD,CAA3B;AACAS,EAAAA,aAAa,CAACR,OAAd,CAAsBU,qBAAtB,EAA6CI,gBAA7C,GAAgE,IAAhE;AAEAhB,EAAAA,CAAC,CAACW,qBAAF,CAAwB,MAAM;AAC5BX,IAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BC,aAA/B;AACD,GAFD;AAGD,CAxCH;AA0CAb,CAAC,CAACC,IAAF,CAAO,iDAAP,EACGb,MADH,CACUD,QAAQ,CAAC,MAAD,EAASI,aAAT,CADlB,EAEGW,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM;AAAEO,IAAAA;AAAF,MAAWP,CAAC,CAACf,MAAnB;AACA,QAAMiC,OAAO,GAAG/B,gBAAgB,CAACoB,IAAD,CAAhB,CAAuBY,qBAAvB,CAA6CC,UAA7C,GAA0D,CAA1E;AAEA,QAAM3B,UAAU,GAAG;AACjBS,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,UAAU,EAAEC,cAAc,CAACgB,QAAzC;AAAmDd,MAAAA,IAAnD;AAAyDS,MAAAA,gBAAgB,EAAE;AAA3E,KAAD;AADQ,GAAnB;AAIAhB,EAAAA,CAAC,CAACW,qBAAF,CAAwB,MAAM;AAC5BX,IAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BhB,UAA/B;AACD,GAFD,EAEG,CAACyB,OAFJ;AAGD,CAbH,E,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAUI,qBAAV,CACEC,WADF,EAEEC,aAFF,EAGoC;AAClC,QAAMC,IAAI,GAAGtC,gBAAgB,CAACoC,WAAD,CAA7B;;AACA,MAAIC,aAAJ,EAAmB;AACjB,SAAK,MAAME,gBAAX,IAA+BtC,aAA/B,EAA8C;AAC5C,UACEqC,IAAI,CAACE,kBAAL,CAAwBC,KAAxB,KACAzC,gBAAgB,CAACuC,gBAAD,CAAhB,CAAmCC,kBAAnC,CAAsDC,KAFxD,EAGE;AACA,cAAMF,gBAAN;AACD;AACF;AACF,GATD,MASO;AACL,UAAMD,IAAI,CAACE,kBAAL,CAAwBC,KAAxB,KAAkC,SAAlC,GAA8C,iBAA9C,GAAkE,SAAxE;AACD;AACF;;AAED,MAAMC,kCAAkC,GAAG5C,MAAM,GAC9C6C,OADwC,CAChC9C,QAAQ,CAAC,WAAD,EAAcI,aAAd,CADwB,EAExC0C,OAFwC,CAEhC9C,QAAQ,CAAC,iBAAD,EAAoBM,aAApB,CAFwB,EAGxCyC,MAHwC,CAGjCC,CAAC,IAAI,CAAC7C,gBAAgB,CAAC6C,CAAC,CAACC,SAAH,CAAhB,CAA8BC,WAA9B,GAA4CF,CAAC,CAACG,eAA/C,MAAoE,CAHxC,EAIxCC,MAJwC,CAIjC,WAAWJ,CAAX,EAAc;AACpB,OAAK,MAAMR,aAAX,IAA4B,CAAC,IAAD,EAAO,KAAP,CAA5B,EAA2C;AACzC,WAAOxC,QAAQ,CAAC,WAAD,EAAcsC,qBAAqB,CAACU,CAAC,CAACC,SAAH,EAAcT,aAAd,CAAnC,CAAf;AACD;AACF,CARwC,EASxCM,OATwC,CAShC9C,QAAQ,CAAC,iBAAD,EAAoBM,aAApB,CATwB,EAUxCyC,MAVwC,CAUjCC,CAAC,IAAI,CAAC7C,gBAAgB,CAAC6C,CAAC,CAACK,SAAH,CAAhB,CAA8BH,WAA9B,GAA4CF,CAAC,CAACM,eAA/C,MAAoE,CAVxC,CAA3C,C,CAYA;AACA;;AACAzC,CAAC,CAACC,IAAF,CAAO,8CAAP,EACGb,MADH,CACU4C,kCADV,EAEG9B,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM;AAAEiC,IAAAA,SAAF;AAAaI,IAAAA,SAAb;AAAwBF,IAAAA,eAAxB;AAAyCG,IAAAA;AAAzC,MAA6DtC,CAAC,CAACf,MAArE;AACA,QAAMsD,aAAa,GAAGpD,gBAAgB,CAAC8C,SAAD,CAAtC;AACA,QAAMO,UAAU,GAAGD,aAAa,CAACZ,kBAAd,CAAiCc,GAApD;AACA,QAAMC,aAAa,GAAGvD,gBAAgB,CAACkD,SAAD,CAAtC;AAEA,QAAMM,mBAA8C,GAAG,EAAvD;;AACA,OAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,UAApB,EAAgC1B,CAAC,EAAjC,EAAqC;AACnC6B,IAAAA,mBAAmB,CAAC5B,IAApB,CAAyB;AACvBZ,MAAAA,OAAO,EAAEW,CADc;AAEvBV,MAAAA,UAAU,EAAE+B,eAFW;AAGvB5B,MAAAA,IAAI,EAAE0B,SAHiB;AAIvBW,MAAAA,oBAAoB,EAAEL,aAAa,CAACM,QAAd,KAA2B,YAA3B,GAA0C,YAA1C,GAAyDC;AAJxD,KAAzB;AAMD;;AAED,QAAM7C,cAAc,GAAG;AAAEC,IAAAA,OAAO,EAAEyC;AAAX,GAAvB,CAhBa,CAkBb;;AACA3C,EAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BR,cAA/B;AAEA,QAAM8C,aAAa,GAAGvD,KAAK,CAACS,cAAD,CAA3B;AACA8C,EAAAA,aAAa,CAAC7C,OAAd,CAAsBa,IAAtB,CAA2B;AACzBZ,IAAAA,OAAO,EAAEqC,UADgB;AAEzBpC,IAAAA,UAAU,EAAEkC,eAFa;AAGzB/B,IAAAA,IAAI,EAAE8B,SAHmB;AAIzBO,IAAAA,oBAAoB,EAAEF,aAAa,CAACG,QAAd,KAA2B,YAA3B,GAA0C,YAA1C,GAAyDC;AAJtD,GAA3B;AAOA,QAAME,WAAW,GAAGR,UAAU,IAAInD,wBAAlC;AAEAW,EAAAA,CAAC,CAACW,qBAAF,CAAwB,MAAM;AAC5BX,IAAAA,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+BsC,aAA/B;AACD,GAFD,EAEGC,WAFH;AAGD,CApCH,E,CAsCA;AACA;AACA;;AACAnD,CAAC,CAACC,IAAF,CAAO,4CAAP,EACGb,MADH,CACU4C,kCADV,EAEG9B,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM;AAAEiC,IAAAA,SAAF;AAAaI,IAAAA,SAAb;AAAwBF,IAAAA,eAAxB;AAAyCG,IAAAA;AAAzC,MAA6DtC,CAAC,CAACf,MAArE;AACA,QAAMsD,aAAa,GAAGpD,gBAAgB,CAAC8C,SAAD,CAAtC;AACA,QAAMO,UAAU,GAAGD,aAAa,CAACZ,kBAAd,CAAiCc,GAApD;AACA,QAAMC,aAAa,GAAGvD,gBAAgB,CAACkD,SAAD,CAAtC;AAEA,QAAMM,mBAA8C,GAAG,EAAvD;;AACA,OAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,UAApB,EAAgC1B,CAAC,EAAjC,EAAqC;AACnC6B,IAAAA,mBAAmB,CAAC5B,IAApB,CAAyB;AACvBZ,MAAAA,OAAO,EAAEW,CADc;AAEvBV,MAAAA,UAAU,EAAE+B,eAFW;AAGvB5B,MAAAA,IAAI,EAAE0B,SAHiB;AAIvBW,MAAAA,oBAAoB,EAAEL,aAAa,CAACM,QAAd,KAA2B,YAA3B,GAA0C,YAA1C,GAAyDC;AAJxD,KAAzB;AAMD;;AAED,QAAMG,UAAU,GAAGjD,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+B;AAAEP,IAAAA,OAAO,EAAEyC;AAAX,GAA/B,CAAnB,CAhBa,CAkBb;;AACA3C,EAAAA,CAAC,CAACQ,MAAF,CAAS0C,oBAAT,CAA8B;AAAEC,IAAAA,gBAAgB,EAAE,CAACF,UAAD;AAApB,GAA9B;AAEA,QAAMG,WAAW,GAAGpD,CAAC,CAACQ,MAAF,CAASC,qBAAT,CAA+B;AACjDP,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,OAAO,EAAE,CADX;AAEEC,MAAAA,UAAU,EAAEkC,eAFd;AAGE/B,MAAAA,IAAI,EAAE8B,SAHR;AAIEO,MAAAA,oBAAoB,EAAEF,aAAa,CAACG,QAAd,KAA2B,YAA3B,GAA0C,YAA1C,GAAyDC;AAJjF,KADO;AADwC,GAA/B,CAApB,CArBa,CAgCb;;AACA,QAAMO,uCAAuC,GAC3C,CAAClB,eAAe,GAAGG,eAAnB,MAAwC,CAAxC,IACAnD,gBAAgB,CAAC8C,SAAD,CAAhB,CAA4BN,kBAA5B,CAA+CC,KAA/C,KACEzC,gBAAgB,CAACkD,SAAD,CAAhB,CAA4BV,kBAA5B,CAA+CC,KAHnD;AAIA,QAAM0B,0BAA0B,GAAGD,uCAAnC;AAEArD,EAAAA,CAAC,CAACW,qBAAF,CAAwB,MAAM;AAC5BX,IAAAA,CAAC,CAACQ,MAAF,CAAS0C,oBAAT,CAA8B;AAAEC,MAAAA,gBAAgB,EAAE,CAACF,UAAD,EAAaG,WAAb;AAApB,KAA9B;AACD,GAFD,EAEGE,0BAFH;AAGD,CA5CH","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kBindingTypeInfo,\n  kBindingTypes,\n  kMaxBindingsPerBindGroup,\n  kShaderStages,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('some_binding_index_was_specified_more_than_once').fn(async t => {\n  const goodDescriptor = {\n    entries: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' as const },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' as const },\n    ],\n  };\n\n  // Control case\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.entries[1].binding = 0;\n\n  // Binding index 0 can't be specified twice.\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(badDescriptor);\n  });\n});\n\ng.test('visibility_of_bindings_can_be_0').fn(async t => {\n  t.device.createBindGroupLayout({\n    entries: [{ binding: 0, visibility: 0, type: 'storage-buffer' }],\n  });\n});\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .params([\n    { type: 'storage-buffer' as const, maxDynamicBufferCount: 4 },\n    { type: 'uniform-buffer' as const, maxDynamicBufferCount: 8 },\n  ])\n  .fn(async t => {\n    const { type, maxDynamicBufferCount } = t.params;\n\n    const maxDynamicBufferBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxDynamicBufferCount; i++) {\n      maxDynamicBufferBindings.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        type,\n        hasDynamicOffset: true,\n      });\n    }\n\n    const goodDescriptor = {\n      entries: [\n        ...maxDynamicBufferBindings,\n        {\n          binding: maxDynamicBufferBindings.length,\n          visibility: GPUShaderStage.COMPUTE,\n          type,\n          hasDynamicOffset: false,\n        },\n      ],\n    };\n\n    // Control case\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Dynamic buffers exceed maximum in a bind group layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[maxDynamicBufferCount].hasDynamicOffset = true;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(badDescriptor);\n    });\n  });\n\ng.test('dynamic_set_to_true_is_allowed_only_for_buffers')\n  .params(poptions('type', kBindingTypes))\n  .fn(async t => {\n    const { type } = t.params;\n    const success = kBindingTypeInfo[type].perPipelineLimitClass.maxDynamic > 0;\n\n    const descriptor = {\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type, hasDynamicOffset: true }],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(descriptor);\n    }, !success);\n  });\n\n// One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n// For each item in the array returned here, a case will be generated which tests a pipeline\n// layout with one extra bind group layout with one extra binding. That extra binding will have:\n//\n//   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n//     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n//   - Otherwise, an arbitrary other type.\nfunction* pickExtraBindingTypes(\n  bindingType: GPUBindingType,\n  extraTypeSame: boolean\n): IterableIterator<GPUBindingType> {\n  const info = kBindingTypeInfo[bindingType];\n  if (extraTypeSame) {\n    for (const extraBindingType of kBindingTypes) {\n      if (\n        info.perStageLimitClass.class ===\n        kBindingTypeInfo[extraBindingType].perStageLimitClass.class\n      ) {\n        yield extraBindingType;\n      }\n    }\n  } else {\n    yield info.perStageLimitClass.class === 'sampler' ? 'sampled-texture' : 'sampler';\n  }\n}\n\nconst kCasesForMaxResourcesPerStageTests = params()\n  .combine(poptions('maxedType', kBindingTypes))\n  .combine(poptions('maxedVisibility', kShaderStages))\n  .filter(p => (kBindingTypeInfo[p.maxedType].validStages & p.maxedVisibility) !== 0)\n  .expand(function* (p) {\n    for (const extraTypeSame of [true, false]) {\n      yield* poptions('extraType', pickExtraBindingTypes(p.maxedType, extraTypeSame));\n    }\n  })\n  .combine(poptions('extraVisibility', kShaderStages))\n  .filter(p => (kBindingTypeInfo[p.extraType].validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .params(kCasesForMaxResourcesPerStageTests)\n  .fn(async t => {\n    const { maxedType, extraType, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = kBindingTypeInfo[maxedType];\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = kBindingTypeInfo[extraType];\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        type: maxedType,\n        storageTextureFormat: maxedTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      type: extraType,\n      storageTextureFormat: extraTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n    });\n\n    const shouldError = maxedCount >= kMaxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, shouldError);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .params(kCasesForMaxResourcesPerStageTests)\n  .fn(async t => {\n    const { maxedType, extraType, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = kBindingTypeInfo[maxedType];\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = kBindingTypeInfo[extraType];\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        type: maxedType,\n        storageTextureFormat: maxedTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          type: extraType,\n          storageTextureFormat: extraTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      kBindingTypeInfo[maxedType].perStageLimitClass.class ===\n        kBindingTypeInfo[extraType].perStageLimitClass.class;\n    const layoutExceedsPerStageLimit = newBindingCountsTowardSamePerStageLimit;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, layoutExceedsPerStageLimit);\n  });\n"],"file":"createBindGroupLayout.spec.js"}