{"version":3,"sources":["../../../../src/common/framework/logging/log_message.ts"],"names":["extractImportantStackTrace","LogMessageWithStack","Error","constructor","name","ex","message","stack","setStackHidden","stackHidden","incrementTimesSeen","timesSeen","toJSON","m"],"mappings":";;;;;;AAAA,SAASA,0BAAT,QAA2C,kBAA3C;AAEA,OAAO,MAAMC,mBAAN,SAAkCC,KAAlC,CAAwC;AAI7CC,EAAAA,WAAW,CAACC,IAAD,EAAeC,EAAf,EAA0B;AACnC,UAAMA,EAAE,CAACC,OAAT;;AADmC,yCAHN,KAGM;;AAAA,uCAFT,CAES;;AAGnC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,KAAL,GAAaF,EAAE,CAACE,KAAhB;AACD;AAED;;;AACAC,EAAAA,cAAc,GAAG;AACf,SAAKC,WAAL,GAAmB,IAAnB;AACD;AAED;;;AACAC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,SAAL;AACD;;AAEDC,EAAAA,MAAM,GAAW;AACf,QAAIC,CAAC,GAAG,KAAKT,IAAL,GAAY,IAApB;;AACA,QAAI,CAAC,KAAKK,WAAN,IAAqB,KAAKF,KAA9B,EAAqC;AACnC;AACAM,MAAAA,CAAC,IAAIb,0BAA0B,CAAC,IAAD,CAA/B;AACD,KAHD,MAGO;AACLa,MAAAA,CAAC,IAAI,KAAKP,OAAV;AACD;;AACD,QAAI,KAAKK,SAAL,GAAiB,CAArB,EAAwB;AACtBE,MAAAA,CAAC,IAAK,WAAU,KAAKF,SAAU,8BAA/B;AACD;;AACD,WAAOE,CAAP;AACD;;AAjC4C","sourcesContent":["import { extractImportantStackTrace } from '../util/stack.js';\n\nexport class LogMessageWithStack extends Error {\n  private stackHidden: boolean = false;\n  private timesSeen: number = 1;\n\n  constructor(name: string, ex: Error) {\n    super(ex.message);\n\n    this.name = name;\n    this.stack = ex.stack;\n  }\n\n  /** Set a flag so the stack is not printed in toJSON(). */\n  setStackHidden() {\n    this.stackHidden = true;\n  }\n\n  /** Increment the \"seen x times\" counter. */\n  incrementTimesSeen() {\n    this.timesSeen++;\n  }\n\n  toJSON(): string {\n    let m = this.name + ': ';\n    if (!this.stackHidden && this.stack) {\n      // this.message is already included in this.stack\n      m += extractImportantStackTrace(this);\n    } else {\n      m += this.message;\n    }\n    if (this.timesSeen > 1) {\n      m += `\\n(seen ${this.timesSeen} times with identical stack)`;\n    }\n    return m;\n  }\n}\n"],"file":"log_message.js"}