{"version":3,"sources":["../../../src/common/tools/gen_wpt_cts_html.ts"],"names":["promises","fs","listing","DefaultTestFileLoader","TestQueryMultiTest","TestQueryMultiFile","assert","printUsageAndExit","rc","console","error","process","exit","argv","length","outFile","templateFile","argsPrefixesFile","expectationsFile","expectationsPrefix","suite","entries","lines","filter","l","map","file","toString","generateFile","argsPrefixes","readFile","split","a","sort","b","expectationLines","Set","expectations","Map","prefix","set","expLoop","exp","argsPrefix","startsWith","get","push","substring","log","loader","rootQuery","tree","loadTree","undefined","q","iterateCollapsedQueries","urlQueryString","result","line","writeFile"],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\n\nimport { listing } from '../../webgpu/listing.js';\nimport { DefaultTestFileLoader } from '../framework/file_loader.js';\nimport { TestQueryMultiTest, TestQueryMultiFile } from '../framework/query/query.js';\nimport { TestSuiteListingEntry } from '../framework/test_suite_listing.js';\nimport { assert } from '../framework/util/util.js';\n\nfunction printUsageAndExit(rc: number): void {\n  console.error(`\\\nUsage:\n  tools/gen_wpt_cts_html OUTPUT_FILE TEMPLATE_FILE [ARGUMENTS_PREFIXES_FILE EXPECTATIONS_FILE EXPECTATIONS_PREFIX SUITE]\n  tools/gen_wpt_cts_html out-wpt/cts.html templates/cts.html\n  tools/gen_wpt_cts_html my/path/to/cts.html templates/cts.html arguments.txt myexpectations.txt 'path/to/cts.html' cts\n\nwhere arguments.txt is a file containing a list of arguments prefixes to both generate and expect\nin the expectations. The entire variant list generation runs *once per prefix*, so this\nmultiplies the size of the variant list.\n\n  ?worker=0&q=\n  ?worker=1&q=\n\nand myexpectations.txt is a file containing a list of WPT paths to suppress, e.g.:\n\n  path/to/cts.html?worker=0&q=webgpu:a/foo:bar={\"x\":1}\n  path/to/cts.html?worker=1&q=webgpu:a/foo:bar={\"x\":1}\n\n  path/to/cts.html?worker=1&q=webgpu:a/foo:bar={\"x\":3}\n`);\n  process.exit(rc);\n}\n\nif (process.argv.length !== 4 && process.argv.length !== 8) {\n  printUsageAndExit(0);\n}\n\nconst [\n  ,\n  ,\n  outFile,\n  templateFile,\n  argsPrefixesFile,\n  expectationsFile,\n  expectationsPrefix,\n  suite,\n] = process.argv;\n\n(async () => {\n  if (process.argv.length === 4) {\n    const entries = (await listing) as TestSuiteListingEntry[];\n    const lines = entries\n      // Exclude READMEs.\n      .filter(l => !('readme' in l))\n      .map(l => '?q=' + new TestQueryMultiTest('webgpu', l.file, []).toString());\n    await generateFile(lines);\n  } else {\n    // Prefixes sorted from longest to shortest\n    const argsPrefixes = (await fs.readFile(argsPrefixesFile, 'utf8'))\n      .split('\\n')\n      .filter(a => a.length)\n      .sort((a, b) => b.length - a.length);\n    const expectationLines = new Set(\n      (await fs.readFile(expectationsFile, 'utf8')).split('\\n').filter(l => l.length)\n    );\n\n    const expectations: Map<string, string[]> = new Map();\n    for (const prefix of argsPrefixes) {\n      expectations.set(prefix, []);\n    }\n\n    expLoop: for (const exp of expectationLines) {\n      // Take each expectation for the longest prefix it matches.\n      for (const argsPrefix of argsPrefixes) {\n        const prefix = expectationsPrefix + argsPrefix;\n        if (exp.startsWith(prefix)) {\n          expectations.get(argsPrefix)!.push(exp.substring(prefix.length));\n          continue expLoop;\n        }\n      }\n      console.log('note: ignored expectation: ' + exp);\n    }\n\n    const loader = new DefaultTestFileLoader();\n    const lines: Array<string | undefined> = [];\n    for (const prefix of argsPrefixes) {\n      const rootQuery = new TestQueryMultiFile(suite, []);\n      const tree = await loader.loadTree(rootQuery, expectations.get(prefix)!);\n\n      lines.push(undefined); // output blank line between prefixes\n      for (const q of tree.iterateCollapsedQueries()) {\n        const urlQueryString = prefix + q.toString(); // \"?worker=0&q=...\"\n        // Check for a safe-ish path length limit. Filename must be <= 255, and on Windows the whole\n        // path must be <= 259. Leave room for e.g.:\n        // 'c:\\b\\s\\w\\xxxxxxxx\\layout-test-results\\external\\wpt\\webgpu\\cts_worker=0_q=...-actual.txt'\n        assert(\n          urlQueryString.length < 185,\n          'Generated test variant would produce too-long -actual.txt filename. \\\nTry broadening suppressions to avoid long test variant names. ' +\n            urlQueryString\n        );\n        lines.push(urlQueryString);\n      }\n    }\n    await generateFile(lines);\n  }\n})();\n\nasync function generateFile(lines: Array<string | undefined>): Promise<void> {\n  let result = '';\n  result += '<!-- AUTO-GENERATED - DO NOT EDIT. See WebGPU CTS: tools/gen_wpt_cts_html. -->\\n';\n\n  result += await fs.readFile(templateFile, 'utf8');\n\n  for (const line of lines) {\n    if (line === undefined) {\n      result += '\\n';\n    } else {\n      result += `<meta name=variant content='${line}'>\\n`;\n    }\n  }\n\n  await fs.writeFile(outFile, result);\n}\n"],"file":"gen_wpt_cts_html.js"}